name: Deploy Application

on:
  push:
    branches:
      - main # Trigger when changes are pushed to main

jobs:
  deploy:
    runs-on: ubuntu-latest # Runs the job on an Ubuntu runner

    steps:
      - name: Checkout Code # Fetches latest code from repo
        uses: actions/checkout@v2
      - name: Install SOPS and Helm # Install dependencies
        run: |
          curl -LO https://github.com/getsops/sops/releases/download/v3.9.4/sops-v3.9.4.linux.amd64
          sudo mv sops-v3.9.4.linux.amd64 /usr/local/bin/sops
          sudo chmod +x /usr/local/bin/sops
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh

      - name: Import GPG Key
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | base64 --decode | gpg --import --batch --yes
          gpg --list-keys       # Optional: To list public keys

          # Get full fingerprint
          FINGERPRINT=$(gpg --list-secret-keys --with-colons | awk -F: '/fpr/{print $10; exit}')

          # Trust the key as 'Ultimate'
          echo "$FINGERPRINT:6:" | gpg --import-ownertrust

      - name: Encrypt Helm Secrets
        run: |
          FINGERPRINT=$(gpg --list-secret-keys --with-colons | awk -F: '/fpr/{print $10; exit}')
          echo "Using GPG Key: $FINGERPRINT"
          if [ -f secrets.yaml ]; then
            sops --pgp $FINGERPRINT -e secrets.yaml > secrets_enc.yaml
          else
            echo "Warning: secrets.yaml does not exist. Skipping encryption."
          fi

      - name: Decrypt Helm Secrets # Decrypt secrets before deploying  
        run: |
          gpg --batch --yes --passphrase '${{ secrets.GPG_PASSPHRASE }}'
          sops -d $SOPS_PGP_FP secrets_enc.yaml > secrets_dec.yaml

      - name: View Decrypted Secrets
        run: cat secrets_dec.yaml

      - name: Deploy to Kubernetes using Helm # Deploy application
        run: |
          helm upgrade --install my-app ./my-app -f secrets_dec.yaml

      - name: Run OWASP ZAP Scan
        run: |
          git clone https://github.com/The-DevSec-Blueprint/TIWAP.git
          cd TIWAP
          docker-compose up -d
          docker pull zaproxy/zap-stable
          docker run -v $(pwd):/zap/wrk/:rw --network="host" zaproxy/zap-stable zap-baseline.py -t https://172.0.0.2:8000 -r scan-report.html
